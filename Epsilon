import heapq
import math

ciudades = {
    "Caracas": (10.491, -66.9036), 
    "Maracaibo": (10.6538, -71.6425),
    "Valencia": (10.1633, -68.0029),
    "Barquisimeto": (10.0736, -69.3158),
    "Cumaná": (10.4497, -64.1734),
    "Margarita": (10.9667, -63.9167),  
    "Mérida": (8.5939, -71.1561)
}


gira = {
    "Caracas": {"Maracaibo": 570, "Valencia": 150, "Barquisimeto": 320, "Cumaná": 360},
    "Maracaibo": {"Caracas": 570, "Valencia": 520, "Barquisimeto": 630, "Mérida": 160},
    "Valencia": {"Caracas": 150, "Maracaibo": 520, "Barquisimeto": 170, "Cumaná": 250},
    "Barquisimeto": {"Caracas": 320, "Maracaibo": 630, "Valencia": 170, "Cumaná": 450, "Mérida": 280},
    "Cumaná": {"Caracas": 360, "Maracaibo": 640, "Valencia": 250, "Barquisimeto": 450, "Margarita": 80},
    "Margarita": {"Cumaná": 80}, 
    "Mérida": {"Barquisimeto": 280, "Maracaibo": 160}
}


def haversine(lat1, lon1, lat2, lon2):
    R = 6371  
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

def heuristica(a, b, epsilon=1.0):

    lat1, lon1 = ciudades[a]
    lat2, lon2 = ciudades[b]
    direct_distance = haversine(lat1, lon1, lat2, lon2)
    return epsilon * direct_distance 

def a_estrella(inicio, fin, epsilon=1.0):

    abierto = []
    heapq.heappush(abierto, (0 + heuristica(inicio, fin, epsilon), 0, inicio))
    
    came_from = {}
    partida = {inicio: 0}
    llegada = {inicio: heuristica(inicio, fin, epsilon)}
    
    while abierto:
        _, current_i, current = heapq.heappop(abierto)
        
        if current == fin:
            
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(inicio)
            path.reverse()
            return path
        
        for c_vecina, distance in gira[current].items():
            tentative_partida = current_i + distance 
            
            if c_vecina not in partida or tentative_partida < partida[c_vecina]:
                came_from[c_vecina] = current
                partida[c_vecina] = tentative_partida
                llegada[c_vecina] = tentative_partida + heuristica(c_vecina, fin, epsilon)
                heapq.heappush(abierto, (llegada[c_vecina], tentative_partida, c_vecina))
    
    return None  


ciudad_inicio = "Mérida" 
ciudad_final = "Caracas" 
epsilon = 1.6  

path = a_estrella(ciudad_inicio, ciudad_final, epsilon)
if path:
    print("Ruta óptima encontrada:", "->".join(path))
else:
    print("No se encontró un camino.")
